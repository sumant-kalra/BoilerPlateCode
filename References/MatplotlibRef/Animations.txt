ðŸ”¹ Creating Animations in Matplotlib

Matplotlib provides the animation module to create animated plots. The most common class used is FuncAnimation, which updates a plot dynamically.

â¸»

ðŸ”¹ Steps to Create an Animation in Matplotlib
	1.	Import Required Libraries

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation


	2.	Create a Figure and Axis

fig, ax = plt.subplots()


	3.	Initialize the Plot Elements

line, = ax.plot([], [], 'r-')  # Empty line to be updated


	4.	Define an Update Function

def update(frame):
    x = np.linspace(0, 2 * np.pi, 100)
    y = np.sin(x + frame / 10)  # Animation effect
    line.set_data(x, y)
    return line,


	5.	Use FuncAnimation to Animate

ani = animation.FuncAnimation(fig, update, frames=100, interval=50)


	6.	Display the Animation

plt.show()



â¸»

ðŸ”¹ Example 1: Animated Sine Wave

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

# Create figure and axis
fig, ax = plt.subplots()
ax.set_xlim(0, 2 * np.pi)
ax.set_ylim(-1.2, 1.2)

# Initialize an empty line
line, = ax.plot([], [], 'r-', lw=2)

# Update function for animation
def update(frame):
    x = np.linspace(0, 2 * np.pi, 100)
    y = np.sin(x + frame / 10)  # Creates animation effect
    line.set_data(x, y)
    return line,

# Create animation
ani = animation.FuncAnimation(fig, update, frames=100, interval=50)

# Display animation
plt.show()

ðŸ”¹ What happens here?
	â€¢	The sine wave moves left and right by shifting frame/10.
	â€¢	The animation runs for 100 frames with a 50 ms interval between updates.

â¸»

ðŸ”¹ Example 2: Animated 3D Rotating Surface Plot

This example animates a 3D surface plot by rotating the view.

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from mpl_toolkits.mplot3d import Axes3D

# Generate X, Y data
x = np.linspace(-5, 5, 50)
y = np.linspace(-5, 5, 50)
X, Y = np.meshgrid(x, y)
Z = np.sin(np.sqrt(X**2 + Y**2))

# Create figure
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Plot initial surface
surf = ax.plot_surface(X, Y, Z, cmap='viridis')

# Animation function to rotate the 3D plot
def update(frame):
    ax.view_init(elev=30, azim=frame)  # Rotate the view
    return ax,

# Create animation
ani = animation.FuncAnimation(fig, update, frames=360, interval=50)

plt.show()

ðŸ”¹ What happens here?
	â€¢	The 3D surface rotates by changing the azimuth angle (azim=frame).
	â€¢	The animation runs for 360 frames (one full rotation).
	â€¢	The interval=50 sets the speed of animation.

â¸»

ðŸ”¹ Example 3: Animated Scatter Plot with Moving Points

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

# Create figure and axis
fig, ax = plt.subplots()
ax.set_xlim(0, 1)
ax.set_ylim(0, 1)

# Generate initial random scatter points
x = np.random.rand(50)
y = np.random.rand(50)
sc = ax.scatter(x, y)

# Update function
def update(frame):
    x_new = np.random.rand(50)  # New random x positions
    y_new = np.random.rand(50)  # New random y positions
    sc.set_offsets(np.c_[x_new, y_new])  # Update scatter plot
    return sc,

# Create animation
ani = animation.FuncAnimation(fig, update, frames=50, interval=100)

plt.show()

ðŸ”¹ What happens here?
	â€¢	The scatter points change positions every frame.
	â€¢	np.c_[x_new, y_new] updates the scatter points.
	â€¢	The animation runs for 50 frames with a 100 ms delay.

â¸»

ðŸ”¹ Saving the Animation

To save an animation as a GIF or MP4:

ani.save("animation.mp4", writer="ffmpeg", fps=30)

or

ani.save("animation.gif", writer="pillow", fps=30)

ðŸ”¹ Note: You need to install FFmpeg (pip install ffmpeg) for MP4 and Pillow (pip install pillow) for GIF.

â¸»

ðŸ”¹ Summary of Animation Methods

Animation Type	Function Used	Description
Line Animation	ax.plot() + FuncAnimation	Moves a line dynamically
3D Rotation	ax.view_init() + FuncAnimation	Rotates a 3D surface plot
Scatter Animation	ax.scatter() + FuncAnimation	Updates scatter points
